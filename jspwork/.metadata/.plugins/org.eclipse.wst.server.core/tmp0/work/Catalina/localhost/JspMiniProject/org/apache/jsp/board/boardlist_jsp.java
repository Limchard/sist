/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-09-12 04:42:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import data.dao.SmartAnswerDao;
import data.dto.SmartDto;
import java.text.SimpleDateFormat;
import java.util.List;
import data.dao.SmartDao;

public final class boardlist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("data.dao.SmartDao");
    _jspx_imports_classes.add("data.dao.SmartAnswerDao");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("data.dto.SmartDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Bagel+Fat+One&family=Dongle:wght@300&family=East+Sea+Dokdo&family=Gamja+Flower&family=Gowun+Dodum&family=Nanum+Gothic+Coding&family=Nanum+Pen+Script&family=Orbit&display=swap\" rel=\"stylesheet\">\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<style>\n");
      out.write("a:link,a:visited{\n");
      out.write("	color: black;\n");
      out.write("	text-decoration: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write("a:hover{\n");
      out.write("	text-decoration: underline;\n");
      out.write("}\n");
      out.write("\n");
      out.write("</style>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("$(function(){\n");
      out.write("	\n");
      out.write("	// 전체선택 클릭 시 체크값을 얻어서 모든 체크값에 전달해보자\n");
      out.write("	$(\".alldelcheck\").click(function(){\n");
      out.write("		\n");
      out.write("		// 전체 체그값 얻기\n");
      out.write("		var chk=$(this).is(\":checked\");\n");
      out.write("		console.log(chk);\n");
      out.write("		\n");
      out.write("		// 전체 check값(chk)를 글 앞의 check에 일괄적으로 전달하기 \n");
      out.write("		$(\".delcheck\").prop(\"checked\",chk);\n");
      out.write("		\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	$(\"#btndel\").click(function(){\n");
      out.write("		\n");
      out.write("		// 체크 갯수에 대한 길이 값	\n");
      out.write("		var len=$(\".delcheck:checked\").length;\n");
      out.write("		// alert(len);\n");
      out.write("		\n");
      out.write("		if(len==0){\n");
      out.write("			alert(\"최소 1개 이상 체크해 주세요\")\n");
      out.write("		} else {\n");
      out.write("			var a=confirm(len+\"개의 글을 삭제하시려면 [확인]을 눌러주세요\")\n");
      out.write("			\n");
      out.write("			// 체크된 곳의 value값 얻기(num)\n");
      out.write("			var n=\"\";\n");
      out.write("			\n");
      out.write("			$(\".delcheck:checked\").each(function(idx){\n");
      out.write("				n+=$(this).val()+\",\";\n");
      out.write("			});\n");
      out.write("			\n");
      out.write("			// 마지막 컴마 제거하기 	\n");
      out.write("			n=n.substring(0,n.length-1);\n");
      out.write("			console.log(n);\n");
      out.write("			\n");
      out.write("			// 삭제파일로 전송\n");
      out.write("			location.href=\"board/alldeleteaction.jsp?nums=\"+n;\n");
      out.write("			\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("});\n");
      out.write("\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("\n");

SmartDao dao=new SmartDao();

//페이징처리하기
int totalCount=dao.getTotalCount(); // 전체 갯수
int totalPage; // 총 페이지 수
int startPage; // 각 블럭에서 보여질 시작 페이지
int endPage; // 각 블럭에서 보여질 끝 페이지
int startNum; // db에서 가져올 글의 시작번호 (MySQL에서는 첫 글이 0번, Oracle에서는 1번)
int perPage=3; // 한페이지당 몇개의 게시글을 보여줄 것인가? // 선생님 표현 : 한페이지당 몇개의 글을 보여줄 것인가? 
int perBlock=5; // 한 페이지당 몇개의 블락 no을 보여줄 것인가? //선생님 표현 : 한 블럭당 몇개의 페이지를 보여줄 것인가? 보통 페이지 아래에 1~숫자... 다음 페이지  
int currentPage; // 현재페이지 -> 몇번 block No에 있는가? 
int no; // 각페이지당 출력할 시작번호



//현재 페이지에대한 설정
//현재 페이지 읽기(단 null일 경우는 1페이지로 준다)
if(request.getParameter("currentPage")==null||request.getParameter("currentPage").equals("null")){
     	currentPage=1;
}  else {
        currentPage=Integer.parseInt(request.getParameter("currentPage")); // getParameter로 받을때에는 무조건 문자열로 불러온다. 계산을 해야하기 때문에 형변환 해준다.
}     
 // 총페이지수 구하기
 // 총 글의 갯수/한페이지당 보여질 갯수로 나눔(7/5=1) -> 나머지가 1개라도 있으면 1page를 추가한다는 의미다.
	totalPage=totalCount/perPage+(totalCount%perPage==0?0:1);
	
 // 각 블럭당 보여야 할 시작페이지 
 // perBlock=5일 경우는 현재페이지가 1~5 까지, 시작이 1, 끝이 5라는 뜻!
 // 현재페이지가 13일경우 시작이 11, 끝이 15 라는 것을 지정해주는 수식! // block 넘버를 뜻한다. 
	startPage=(currentPage-1)/perBlock*perBlock+1; // 현재 페이지에 표현되는 시작 block number	
  
	endPage=startPage+perBlock-1; // 현재 페이지에 표현되는 끝 block number
 
 // 만약에 총page가 23까지 있으면 마지막 블럭은 25가 아니라 23이다. 
   if(endPage>totalPage)
     	endPage=totalPage;

 // 각 페이지에서 보여질 시작번호
 // 1페이지 : 0, 2페이지 : 5, 3페이지 : 10....
 startNum=(currentPage-1)*perPage;
 
 // 각 페이지당 출력할 시작번호 구하기 no	
 // 예) 총 글 갯수가 23이면, 1페이지 넘버링 시작은 23이다. 2페이지는 18, 3페이지는 13...
	// 출력시 1 감소하면서 출력
	no=totalCount-(currentPage-1)*perPage; // 내림차순이기때문에 쓴 것이다.	
 
 // 페이지에서 보여질 글만 가져오기
 List<SmartDto> list=dao.getPagingList(startNum, perPage);
 
	

// 댓글 dao 호출
SmartAnswerDao adao=new SmartAnswerDao();
for(SmartDto dto:list){
	// 댓글변수에 댓글 총 갯수 넣기
	int acount=adao.getAllSmartAnswers(dto.getNum()).size();
	dto.setAnswercount(acount);
}
	

      out.write("\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<div style=\"margin: 30px 30px; width: 800px;\" >\n");
      out.write("	<br>\n");
      out.write("	\n");
      out.write("	<h5><b>총 ");
      out.print(totalCount );
      out.write("개의 게시글이 있습니다.</b></h5>\n");
      out.write("	\n");
      out.write("		<table class=\"table table-bordered\">\n");
      out.write("			<caption align=\"top\"><B>스마트 게시판 목록</B></caption>\n");
      out.write("			<tr class=\"table-light\">\n");
      out.write("				<th width=\"60\">번호</th>\n");
      out.write("				<th width=\"360\">제목</th>\n");
      out.write("				<th width=\"130\">작성자</th>\n");
      out.write("				<th width=\"160\">작성일</th>\n");
      out.write("				<th width=\"60\">조회</th>\n");
      out.write("			</tr>\n");
      out.write("			\n");
      out.write("			");

			if(totalCount==0){
      out.write("\n");
      out.write("				<tr>\n");
      out.write("					<td colspan=\"5\" align=\"center\">\n");
      out.write("						<h6>등록된 게시글이 없습니다.</h6>\n");
      out.write("					</td>\n");
      out.write("				</tr>	\n");
      out.write("			");
} else {
				SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
				for(SmartDto dto:list){
      out.write("\n");
      out.write("					<tr>\n");
      out.write("						<td align=\"center\"> \n");
      out.write("						<input type=\"checkbox\" value=\"");
      out.print(dto.getNum());
      out.write("\" class=\"delcheck\"> &nbsp;\n");
      out.write("						");
      out.print(no-- );
      out.write("\n");
      out.write("						</td>\n");
      out.write("						<td>\n");
      out.write("							<a href=\"index.jsp?main=board/contentview.jsp?num=");
      out.print(dto.getNum());
      out.write("&currentPage=");
      out.print(currentPage);
      out.write('"');
      out.write('>');
      out.print(dto.getSubject() );
      out.write("</a>\n");
      out.write("							\n");
      out.write("							<!-- 댓글갯수 출력하기 -->\n");
      out.write("							");

							if(dto.getAnswercount()>0){
      out.write("\n");
      out.write("							<a href=\"index.jsp?main=board/contentview.jsp?num=");
      out.print(dto.getNum());
      out.write("&currentPage=");
      out.print(currentPage);
      out.write("#alist\" style=\"color: red\">[");
      out.print(dto.getAnswercount() );
      out.write("]</a>	<!-- #alist : 넘어갈때 바로 댓글 부분으로 간다  %-->\n");
      out.write("							");
}
							
      out.write("\n");
      out.write("							\n");
      out.write("						</td>\n");
      out.write("						<td align=\"center\">");
      out.print(dto.getWriter() );
      out.write("</td>\n");
      out.write("						<td align=\"center\">");
      out.print(sdf.format(dto.getWriteday()) );
      out.write("</td>\n");
      out.write("						<td align=\"center\">");
      out.print(dto.getReadcount() );
      out.write("</td>\n");
      out.write("					</tr>\n");
      out.write("				");
}
			}
			
      out.write("\n");
      out.write("			<tr>\n");
      out.write("				<td colspan=\"5\">\n");
      out.write("					&nbsp;&nbsp;<input type=\"checkbox\" class=\"alldelcheck\"> 전체선택\n");
      out.write("					<span style=\"float: right;\">\n");
      out.write("						<button type=\"button\" class=\"btn btn-outline-success\" style=\"width: 80px;\" onclick=\"location.href='index.jsp?main=board/smartform.jsp'\"><i class=\"bi bi-pencil\">글쓰기</i></button>&nbsp;\n");
      out.write("						<button type=\"button\" class=\"btn btn-outline-danger\" id=\"btndel\" style=\"width: 80px;\" onclick=\"\"><i class=\"bi bi-trash\">삭제</i></button>	\n");
      out.write("					</span>\n");
      out.write("					\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("		</table>\n");
      out.write("		\n");
      out.write("		<!-- 페이징하기 -->\n");
      out.write("		<div>\n");
      out.write("			<ul class=\"pagination justify-content-center\">\n");
      out.write("		  		");

		  		// 이전
		  		if(startPage>1){ 
      out.write("\n");
      out.write("		  			<li class=\"page-item\">\n");
      out.write("		  					<a class=\"page-link\" href=\"index.jsp?main=board/boardlist.jsp?currentPage=");
      out.print(startPage-1);
      out.write("\"><<</a>\n");
      out.write("		  			</li>\n");
      out.write("		  		");
}
		  		
		  		for(int pp=startPage;pp<=endPage;pp++){
		  			if(pp==currentPage){ // css를 추가하기 위해서 if문 추가하는 것이다. 
		  				
      out.write("\n");
      out.write("		  				<li class=\"page-item active\">\n");
      out.write("		  					<a class=\"page-link\" href=\"index.jsp?main=board/boardlist.jsp?currentPage=");
      out.print(pp);
      out.write('"');
      out.write('>');
      out.print(pp );
      out.write("</a>\n");
      out.write("		  				</li>\n");
      out.write("		  			");
} else{
		  				
      out.write("\n");
      out.write("		  				<li class=\"page-item\">\n");
      out.write("		  					<a class=\"page-link\" href=\"index.jsp?main=board/boardlist.jsp?currentPage=");
      out.print(pp);
      out.write('"');
      out.write('>');
      out.print(pp );
      out.write("</a>\n");
      out.write("		  				</li>\n");
      out.write("		  			");
}
		  		}
		  		
		  		// 다음
		  		if(totalPage>endPage){
		  			
      out.write("\n");
      out.write("		  			<li class=\"page-item\">\n");
      out.write("		  					<a class=\"page-link\" href=\"boardlist.jsp?currentPage=");
      out.print(endPage+1);
      out.write("\">>></a>\n");
      out.write("		  			</li>\n");
      out.write("		  				  			\n");
      out.write("		  		");
}
		  		
      out.write("\n");
      out.write("		  	</ul>\n");
      out.write("		</div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
