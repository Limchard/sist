/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-09-11 06:11:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.guest;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import data.dto.AnswerDto;
import data.dao.AnswerDao;
import data.dao.MemberDao;
import java.text.SimpleDateFormat;
import data.dao.GuestDao;
import java.util.Vector;
import data.dto.GuestDto;
import java.util.List;

public final class guestlist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("data.dto.GuestDto");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("data.dao.MemberDao");
    _jspx_imports_classes.add("java.util.Vector");
    _jspx_imports_classes.add("data.dto.AnswerDto");
    _jspx_imports_classes.add("data.dao.AnswerDao");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("data.dao.GuestDao");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Bagel+Fat+One&family=Dongle:wght@300&family=East+Sea+Dokdo&family=Gamja+Flower&family=Gowun+Dodum&family=Nanum+Gothic+Coding&family=Nanum+Pen+Script&family=Orbit&display=swap\" rel=\"stylesheet\">\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\">\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js\"></script>\n");
      out.write("\n");
      out.write("<style type=\"text/css\">\n");
      out.write("	span.day{\n");
      out.write("		float: right;\n");
      out.write("		font-size: 0.9em;\n");
      out.write("		color: gray;\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	img.photo{\n");
      out.write("		border-radius: 10px;\n");
      out.write("		\n");
      out.write("	}\n");
      out.write("\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<title>Insert title here</title>\n");
      out.write("\n");

// 로그인 상태 확인 후 입력폼 나타낼것_회원만 보이게
String loginok=(String)session.getAttribute("loginok");


GuestDao dao=new GuestDao();

//페이징처리하기
int totalCount=dao.getTotalCount(); // 전체 갯수
int totalPage; // 총 페이지 수
int startPage; // 각 블럭에서 보여질 시작 페이지
int endPage; // 각 블럭에서 보여질 끝 페이지
int startNum; // db에서 가져올 글의 시작번호 (MySQL에서는 첫 글이 0번, Oracle에서는 1번)
int perPage=3; // 한페이지당 몇개의 게시글을 보여줄 것인가? // 선생님 표현 : 한페이지당 몇개의 글을 보여줄 것인가? 
int perBlock=5; // 한 페이지당 몇개의 블락 no을 보여줄 것인가? //선생님 표현 : 한 블럭당 몇개의 페이지를 보여줄 것인가? 보통 페이지 아래에 1~숫자... 다음 페이지  
int currentPage; // 현재페이지 -> 몇번 block No에 있는가? 


//현재 페이지에대한 설정
//현재 페이지 읽기(단 null일 경우는 1페이지로 준다)
if(request.getParameter("currentPage")==null){
     	currentPage=1;
}  else {
        currentPage=Integer.parseInt(request.getParameter("currentPage")); // getParameter로 받을때에는 무조건 문자열로 불러온다. 계산을 해야하기 때문에 형변환 해준다.
}     
 // 총페이지수 구하기
 // 총 글의 갯수/한페이지당 보여질 갯수로 나눔(7/5=1) -> 나머지가 1개라도 있으면 1page를 추가한다는 의미다.
	totalPage=totalCount/perPage+(totalCount%perPage==0?0:1);
	
 // 각 블럭당 보여야 할 시작페이지 
 // perBlock=5일 경우는 현재페이지가 1~5 까지, 시작이 1, 끝이 5라는 뜻!
 // 현재페이지가 13일경우 시작이 11, 끝이 15 라는 것을 지정해주는 수식! // block 넘버를 뜻한다. 
	startPage=(currentPage-1)/perBlock*perBlock+1; // 현재 페이지에 표현되는 시작 block number	
  
	endPage=startPage+perBlock-1; // 현재 페이지에 표현되는 끝 block number
 
 // 만약에 총page가 23까지 있으면 마지막 블럭은 25가 아니라 23이다. 
   if(endPage>totalPage)
     	endPage=totalPage;

 // 각 페이지에서 보여질 시작번호
 // 1페이지 : 0, 2페이지 : 5, 3페이지 : 10....
 startNum=(currentPage-1)*perPage;
 
 
 // 페이지에서 보여질 글만 가져오기
 List<GuestDto> list=dao.getList(startNum, perPage);
 
 SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
 
 
 // 마지막 페이지 남은 한개의 게시글 지우면 빈페이지만 남는다. 이를 해결하기 위해 예외처리 해준다. (이전 페이지로 넘어간다.)
 if(list.size()==0&&currentPage!=1){
      out.write("\n");
      out.write("	 \n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("	location.href=\"index.jsp?main=guest/guestlist.jsp?currentPage=");
      out.print(currentPage-1);
      out.write("\";\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("	 \n");
      out.write(" ");
}


      out.write("\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("	// 추천수 증가 \n");
      out.write("$(function(){\n");
      out.write("	\n");
      out.write("	$(\"span.likes\").click(function(){\n");
      out.write("	var num=$(this).attr(\"num\");\n");
      out.write("	\n");
      out.write("	// alert(num);\n");
      out.write("	var tag=$(this);\n");
      out.write("	\n");
      out.write("	$.ajax({\n");
      out.write("		\n");
      out.write("		type:\"get\",\n");
      out.write("		dataType:\"json\",\n");
      out.write("		url:\"guest/ajaxlikes.jsp\",\n");
      out.write("		data:{\"num\":num},\n");
      out.write("		success:function(data){\n");
      out.write("			\n");
      out.write("			// alert(data.chu);\n");
      out.write("			tag.next().text(data.chu);\n");
      out.write("			\n");
      out.write("			// 추천클릭시 하트 커지고 끝나면 다시 0px;\n");
      out.write("			tag.next().next().animate({\"font-size\":\"20px\"},1000,function(){\n");
      out.write("				$(this).css(\"font-size\",\"0px\");\n");
      out.write("			}); \n");
      out.write("		}\n");
      out.write("	}); \n");
      out.write("	\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	// 댓글부분은 무조건 안보이게 처리\n");
      out.write("	$(\"div.answer\").hide();\n");
      out.write("	\n");
      out.write("	// 댓글 클릭 시 댓글 부분이 보였다 안보였다 하기\n");
      out.write("	$(\"span.answer\").click(function(){\n");
      out.write("		//$(this).prev().slideToggle('slow');\n");
      out.write("		$(this).parent().find(\"div.answer\").toggle();\n");
      out.write("		\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	$(\"i.adel\").click(function(){\n");
      out.write("		\n");
      out.write("		var a=confirm(\"삭제하시려면 [확인]을 눌러주세요\")\n");
      out.write("		\n");
      out.write("		if(a){\n");
      out.write("\n");
      out.write("		var idx=$(this).attr(\"idx\");\n");
      out.write("		// alert(idx);\n");
      out.write("		\n");
      out.write("		$.ajax({\n");
      out.write("			\n");
      out.write("			type:\"get\",\n");
      out.write("			dataType:\"html\",\n");
      out.write("			url:\"guest/answerdelete.jsp\",\n");
      out.write("			data:{\"idx\":idx},\n");
      out.write("			success:function(data){\n");
      out.write("				\n");
      out.write("				location.reload(); // 새로고침\n");
      out.write("				\n");
      out.write("			}\n");
      out.write("		});\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	// 수정아이콘 누르면 모달로 수정폼을 띠우기 \n");
      out.write("	$(\"i.aedit\").click(function(){\n");
      out.write("		var idx=$(this).attr(\"idx\");\n");
      out.write("		alert(idx);\n");
      out.write("		\n");
      out.write("		// 댓글수정폼의 hidden에 idx를 넣어주기\n");
      out.write("		$(\"#idx\").val(idx);\n");
      out.write("	\n");
      out.write("		$.ajax({\n");
      out.write("			\n");
      out.write("			type:\"get\",\n");
      out.write("			dataType:\"json\",\n");
      out.write("			url:\"guest/answercontent.jsp\",\n");
      out.write("			data:{\"idx\":idx},\n");
      out.write("			success:function(res){\n");
      out.write("				\n");
      out.write("				$(\"#idx\").val(res.idx);\n");
      out.write("				$(\"#content\").val(res.story);\n");
      out.write("				\n");
      out.write("			}	\n");
      out.write("		});\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	// 모달창의 수정버튼 누르면 수정이 된 후 reload()\n");
      out.write("	$(\"#btnupdate\").click(function(){\n");
      out.write("		var idx=$(\"#idx\").val();\n");
      out.write("		var content=$(\"#content\").val();\n");
      out.write("				\n");
      out.write("		$.ajax({\n");
      out.write("			\n");
      out.write("			type:\"post\",\n");
      out.write("			dataType:\"html\",\n");
      out.write("			url:\"guest/answerupdate.jsp\",\n");
      out.write("			data:{\"idx\":idx,\"content\":content},\n");
      out.write("			success:function(res){\n");
      out.write("				location.reload();				\n");
      out.write("				\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("		});\n");
      out.write("		\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("});\n");
      out.write("	\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");

if(loginok!=null){
      out.write('\n');
      out.write('	');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "addform.jsp", out, false);
      out.write("\n");
      out.write("	<hr align=\"left\" width=\"700px;\">	\n");
      out.write("	\n");
}

      out.write("\n");
      out.write("<div>\n");
      out.write("	<B>총 ");
      out.print(totalCount );
      out.write("개의 방명록 글이 있습니다.</B>\n");
      out.write("	\n");
      out.write("	");

	MemberDao mdao=new MemberDao();
	for(GuestDto dto:list){
		
		// 이름 얻기
		String name=mdao.getName(dto.getMyid());
		
      out.write("\n");
      out.write("		\n");
      out.write("		<table class=\"table\" style=\"width: 600px;\">\n");
      out.write("			<tr>\n");
      out.write("				<td>\n");
      out.write("					<B><i class=\"bi bi-person-bounding-box\">");
      out.print(name );
      out.write('(');
      out.print(dto.getMyid() );
      out.write(")</i></B>\n");
      out.write("					\n");
      out.write("					");

					// 로그인한 아이디
					String myid=(String)session.getAttribute("myid");
					
					// 로그인한 아이디와 글쓴아이디가 같을 경우에만 수정,삭제 버튼 표현
					if(loginok!=null&&dto.getMyid().equals(myid)){
      out.write("\n");
      out.write("						\n");
      out.write("						<a href=\"index.jsp?main=guest/updateform.jsp?num=");
      out.print(dto.getNum() );
      out.write("&currentPage=");
      out.print(currentPage );
      out.write("\" style=\"color: green;\"><i class=\"bi bi-pencil-square\"></i></a>&nbsp;&nbsp;\n");
      out.write("						<a href=\"guest/delete.jsp?num=");
      out.print(dto.getNum() );
      out.write("&currentPage=");
      out.print(currentPage );
      out.write("\" style=\"color: red;\"><i class=\"bi bi-trash\"></i></a>\n");
      out.write("						\n");
      out.write("					");
}
					
      out.write("\n");
      out.write("					<span class=\"day\">");
      out.print(sdf.format(dto.getWriteday()) );
      out.write("</span>\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("			<tr height=\"150px;\">\n");
      out.write("				<td>\n");
      out.write("					<!-- 이미지가 null이 아닌 경우만 출력하기 -->\n");
      out.write("					");

					if(dto.getPhotoname()!=null){
      out.write("\n");
      out.write("						\n");
      out.write("						<a href=\"save/");
      out.print(dto.getPhotoname());
      out.write("\" target=\"_blank\">\n");
      out.write("							<img alt=\"\" src=\"save/");
      out.print(dto.getPhotoname());
      out.write("\" align=\"right\" style=\"width: 100px;\" class=\"photo\">\n");
      out.write("						</a>\n");
      out.write("						\n");
      out.write("					");
}
					
      out.write("\n");
      out.write("					");
      out.print(dto.getContent().replace("\n", "<br>") );
      out.write("\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("			\n");
      out.write("			<!-- 댓글,추천  -->\n");
      out.write("			<!-- 추천수 클릭시 추천숫자 옆에 하트 커졌다 사라지게 하기 (animate) -->\n");
      out.write("			<tr>\n");
      out.write("				<td>\n");
      out.write("				");

				//각 방명록에 달린 댓글 목록 가져오기
				AnswerDao adao=new AnswerDao();
				List<AnswerDto> alist=adao.getAllAnswers(dto.getNum());
				
				
      out.write("\n");
      out.write("				\n");
      out.write("				<div class=\"answer\">\n");
      out.write("					");

					if(loginok!=null){
      out.write("\n");
      out.write("						<div class=\"answerform\">\n");
      out.write("							<form action=\"guest/answerinsert.jsp\" method=\"post\">\n");
      out.write("								<table class=\"table table-bordered\" style=\"width: 500px;\">\n");
      out.write("									<tr>\n");
      out.write("										<td>\n");
      out.write("											<textarea style=\"width: 480px; height: 80px;\" name=\"content\" required=\"required\" class=\"form-control\"></textarea>\n");
      out.write("										</td>\n");
      out.write("										<td>\n");
      out.write("											<button type=\"submit\" class=\"btn btn-info\" style=\"width: 80px; height: 80px;\">등록</button>\n");
      out.write("											<!-- hidden값 3개.. 내가 직접 기입하지 않고 받아서 넘겨줘야 하는 값  -->\n");
      out.write("											<input type=\"hidden\" name=\"num\" value=\"");
      out.print(dto.getNum());
      out.write("\">\n");
      out.write("											<input type=\"hidden\" name=\"myid\" value=\"");
      out.print(myid);
      out.write("\">\n");
      out.write("											<input type=\"hidden\" name=\"currentPage\" value=\"");
      out.print(currentPage);
      out.write("\">\n");
      out.write("										</td>\n");
      out.write("									</tr>\n");
      out.write("								</table>\n");
      out.write("							</form>\n");
      out.write("						</div>\n");
      out.write("					");
}
					
      out.write("\n");
      out.write("					\n");
      out.write("					<div class=\"answerlist\">\n");
      out.write("						<table class=\"table\" style=\"width: 480px;\">\n");
      out.write("							");

							for(AnswerDto adto:alist){
      out.write("\n");
      out.write("								<tr>\n");
      out.write("									<td width=\"60\">\n");
      out.write("										<i class=\"bi bi-person-circle\"></i>\n");
      out.write("									</td>\n");
      out.write("									<td>\n");
      out.write("										");

										// 작성자명
										String aname=mdao.getName(adto.getMyid());
										
      out.write("\n");
      out.write("										<br>\n");
      out.write("										<b>");
      out.print(aname );
      out.write("</b>\n");
      out.write("										&nbsp;\n");
      out.write("										");

										// 글쓴이와 댓글 쓴이가 같은 경우에 작성자 표시하기
										if(dto.getMyid().equals(adto.getMyid())){
      out.write("\n");
      out.write("											<b><span style=\"color: pink; border: 1px solid pink; border-radius: 8px;\">작성자</span></b>	\n");
      out.write("										");
}
										
      out.write("\n");
      out.write("										<span style=\"font-size: 12pt; color: gray; margin-left: 30px;\">");
      out.print(sdf.format(adto.getWriteday()) );
      out.write("</span>\n");
      out.write("										");

										// 수정 삭제는 로그인중이면서 로그인한 아이디와 같은경우에만 보이게 하기
										if(loginok!=null&&adto.getMyid().equals(myid)){
      out.write("\n");
      out.write("												<i class=\"bi bi-pencil-square aedit\" style=\"color: green; cursor: pointer; float: right;\" idx=");
      out.print(adto.getIdx() );
      out.write("\n");
      out.write("												data-bs-toggle=\"modal\" data-bs-target=\"#myModal\"></i>\n");
      out.write("											\n");
      out.write("											<i class=\"bi bi-trash adel\" style=\"color: red; cursor: pointer; float: right;\" idx=");
      out.print(adto.getIdx() );
      out.write("></i>\n");
      out.write("										");
}
										
      out.write("\n");
      out.write("										<br>\n");
      out.write("										<span>");
      out.print(adto.getContent().replace("\n", "<br>") );
      out.write("</span>\n");
      out.write("										\n");
      out.write("										\n");
      out.write("									</td>\n");
      out.write("								</tr>	\n");
      out.write("							");
}
							
      out.write("						\n");
      out.write("						</table>\n");
      out.write("					</div>\n");
      out.write("				</div>\n");
      out.write("					<span class=\"answer\" style=\"cursor: pointer;\" num=");
      out.print(dto.getNum() );
      out.write("> 댓글 ");
      out.print(alist.size() );
      out.write(" </span> <!-- 댓글 수량 가져오기 -->\n");
      out.write("					<span class=\"likes\" style=\"margin-left: 20px; cursor: pointer;\" num=");
      out.print(dto.getNum() );
      out.write(">추천</span>\n");
      out.write("					<span>");
      out.print(dto.getChu() );
      out.write("</span>\n");
      out.write("					<i class=\"bi bi-chat-heart-fill\" style=\"color: red; font-size: 0px;\"></i>\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("			\n");
      out.write("		</table>\n");
      out.write("	");
}
	
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<!-- 페이지 번호 출력 -->\n");
      out.write("		<div style=\"width: 600px; text-align: center;\" >\n");
      out.write("			<ul class=\"pagination justify-content-center\">\n");
      out.write("		  		");

		  		// 이전
		  		if(startPage>1){ 
      out.write("\n");
      out.write("		  			<li class=\"page-item\">\n");
      out.write("		  					<a class=\"page-link\" href=\"index.jsp?main=guest/guestlist.jsp?currentPage=");
      out.print(startPage-1);
      out.write("\"><<</a>\n");
      out.write("		  			</li>\n");
      out.write("		  		");
}
		  		
		  		for(int pp=startPage;pp<=endPage;pp++){
		  			if(pp==currentPage){ // css를 추가하기 위해서 if문 추가하는 것이다. 
		  				
      out.write("\n");
      out.write("		  				<li class=\"page-item active\">\n");
      out.write("		  					<a class=\"page-link\" href=\"index.jsp?main=guest/guestlist.jsp?currentPage=");
      out.print(pp);
      out.write('"');
      out.write('>');
      out.print(pp );
      out.write("</a>\n");
      out.write("		  				</li>\n");
      out.write("		  			");
} else{
		  				
      out.write("\n");
      out.write("		  				<li class=\"page-item\">\n");
      out.write("		  					<a class=\"page-link\" href=\"index.jsp?main=guest/guestlist.jsp?currentPage=");
      out.print(pp);
      out.write('"');
      out.write('>');
      out.print(pp );
      out.write("</a>\n");
      out.write("		  				</li>\n");
      out.write("		  			");
}
		  		}
		  		
		  		// 다음
		  		if(totalPage>endPage){
		  			
      out.write("\n");
      out.write("		  			<li class=\"page-item\">\n");
      out.write("		  					<a class=\"page-link\" href=\"boardlist.jsp?currentPage=");
      out.print(endPage+1);
      out.write("\">>></a>\n");
      out.write("		  			</li>\n");
      out.write("		  				  			\n");
      out.write("		  		");
}
		  		
      out.write("\n");
      out.write("		  	</ul>\n");
      out.write("		</div>\n");
      out.write("		\n");
      out.write("		<!-- 여기부터 -->\n");
      out.write("		\n");
      out.write("		<!-- The Modal -->\n");
      out.write("\n");
      out.write("<input type=\"hidden\">\n");
      out.write("<div class=\"modal\" id=\"myModal\">\n");
      out.write("  <div class=\"modal-dialog\">\n");
      out.write("    <div class=\"modal-content\">\n");
      out.write("\n");
      out.write("      <!-- Modal Header -->\n");
      out.write("      <div class=\"modal-header\">\n");
      out.write("        <h4 class=\"modal-title\">Modal Heading</h4>\n");
      out.write("        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n");
      out.write("      </div>\n");
      out.write("\n");
      out.write("      <!-- Modal body -->\n");
      out.write("      <div class=\"modal-body\">\n");
      out.write("     	<div class=\"updateform\">\n");
      out.write("     	<input type=\"hidden\" id=\"idx\">\n");
      out.write("     	  <input type=\"text\" id=\"content\">\n");
      out.write("     	  <button type=\"button\" class=\"btn btn-info\" id=\"btnupdate\">댓글수정</button>\n");
      out.write("     	</div>\n");
      out.write("      </div>\n");
      out.write("\n");
      out.write("      <!-- Modal footer -->\n");
      out.write("      <div class=\"modal-footer\">\n");
      out.write("        <button type=\"submit\" class=\"btn btn-outline-danger\" data-bs-dismiss=\"modal\">Close</button>\n");
      out.write("      </div>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("		\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
