/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-09-15 03:34:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.guest;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class addform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Bagel+Fat+One&family=Dongle:wght@300&family=East+Sea+Dokdo&family=Gamja+Flower&family=Gowun+Dodum&family=Nanum+Gothic+Coding&family=Nanum+Pen+Script&family=Orbit&display=swap\" rel=\"stylesheet\">\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("	$(function(){\n");
      out.write("		$(\"i.camera\").click(function(){\n");
      out.write("		\n");
      out.write("			$(\"#photo\").trigger(\"click\"); // 이벤트 강제 호출\n");
      out.write("			\n");
      out.write("		});\n");
      out.write("		\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	 function readURL(input) {\n");
      out.write("	       if (input.files && input.files[0]) {\n");
      out.write("	           var reader = new FileReader(); //파일을 읽기 위한 FileReader객체 생성\n");
      out.write("	           reader.onload = function (e) {\n");
      out.write("	           //파일 읽어들이기를 성공했을때 호출되는 이벤트 핸들러\n");
      out.write("	               //이미지 Tag의 SRC속성에 읽어들인 File내용을 지정 \n");
      out.write("	               $('#showing').attr('src', e.target.result);\n");
      out.write("	           }\n");
      out.write("	           //File내용을 읽어 dataURL형식의 문자열로 저장 \n");
      out.write("	           reader.readAsDataURL(input.files[0]);\n");
      out.write("	       }\n");
      out.write("	 }\n");
      out.write("	\n");
      out.write("</script>\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<!-- 이미지 미리보기 -->\n");
      out.write("<img alt=\"\" src=\"\" id=\"showing\" style=\"position: absolute; left: 800px; top: 100px; max-width: 200px;\">\n");
      out.write("\n");
      out.write("	<form action=\"guest/addproc.jsp\" method=\"post\" enctype=\"multipart/form-data\">\n");
      out.write("		<table class=\"table table-bordered\" style=\"width: 600px;\">\n");
      out.write("			<caption align=\"top\">\n");
      out.write("				<b>방명록 등록</b>\n");
      out.write("				<i class=\"bi bi-camera camera\" style=\"font-size: 1.5em; cursor: pointer;\"></i>\n");
      out.write("				<input type=\"file\" name=\"photo\" id=\"photo\" style=\"visibility: hidden; cursor: pointer;\" onchange=\"readURL(this)\">\n");
      out.write("			</caption>\n");
      out.write("			\n");
      out.write("			<tr height=\"100\">\n");
      out.write("				<td width=\"520\">\n");
      out.write("					<textarea style=\"width: 500px; height: 100px;\" class=\"form-control\" name=\"content\" required=\"required\"></textarea>\n");
      out.write("				</td>\n");
      out.write("				<td>\n");
      out.write("					<button type=\"submit\" class=\"btn btn-outline-info\" style=\"width: 100px; height: 100px; font-size: 1.2em;\">등록</button>\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("		\n");
      out.write("		</table>\n");
      out.write("	</form>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
